1.2

-   added function 'estimPVal' for permutation-based p-value estimation


1.1-1

-   removed storage of covariate values in return object
-   implemented use of score function as selection criterion for linear components
-   added support for 'multicore' package for cross-validation
-   reduced memory consumption, speed-up for large number of linear components
-   added an option for fitting on subsets of observations
-   The coefficient matrix 'beta.linear' is for the linear components is
    now stored as a sparse matrix, employing package 'Matrix'


1.1

-   implemented penalty modification factors and penalty change distribution
    via a connection matrix

1.0

-   added wrappers (GLMBoost and predict.GLMBoost) for conveniently fitting generalized linear
    models, i.e., without smooth components
-   fixed "zero boosting steps" corner case: 
    -   GAMBoost/GLMBoost can now fit with "stepno=0", the trace, deviance, AIC, and BIC
        result vectors have an additional element for boosting step zero, and the elements
        of 'beta'/'beta.linear' for the latter are no longer equal to zero, but contain the
        results from one estimation step for the mandatory covariates, i.e., in the simplest
        case, an intercept-only model is fitted at zero boosting steps.        
    -   cv.GAMBoost/cv.GLMBoost can return an optimum at zero steps, and alos the 'criterion'
        and 'se' elements of the results have an additonal element for boosting step zero
-   implemented parallel evaluation on a compute cluster for cross-validation

0.9-4

-   general performance improvements, especially for componentwise ridge boosting, i.e. boosting
    for covariates with linear influence, and there espacially for binary response models
-   fixed bug in formula for traditional AIC in the Gaussian response case

0.9-3

-   fixed use of weights in cv.GAMBoost 
-   added flexible p value cutoff for prediction and calculation of prediction error
    in cv.GAMBoost

0.9-2

-   fixed a problem where predict.GAMBoost would not work with only linear predictors
    (thanks to Ravi Varadhan for pointing this out)
-   implemented penalty of difference '0' as absolute penalty on coefficients
-   'pdiff, specifying the penalty difference can be a vector now, thus allowing for enforcement 
    of several types of smoothness simultanoeusly'
-   fixed bug that prevented criterion from being save for AIC-optimGAMBoostPenalty
-   optimGAMBoostPenalty now also stores the selection criterion in the GAMBoost object returned


0.9-1

* initial public release
